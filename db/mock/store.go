// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/niiniyare/awo/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/niiniyare/awo/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAircraft mocks base method.
func (m *MockStore) CreateAircraft(arg0 context.Context, arg1 db.CreateAircraftParams) (db.Aircraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAircraft", arg0, arg1)
	ret0, _ := ret[0].(db.Aircraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAircraft indicates an expected call of CreateAircraft.
func (mr *MockStoreMockRecorder) CreateAircraft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAircraft", reflect.TypeOf((*MockStore)(nil).CreateAircraft), arg0, arg1)
}

// CreateAirline mocks base method.
func (m *MockStore) CreateAirline(arg0 context.Context, arg1 db.CreateAirlineParams) (db.Airline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAirline", arg0, arg1)
	ret0, _ := ret[0].(db.Airline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAirline indicates an expected call of CreateAirline.
func (mr *MockStoreMockRecorder) CreateAirline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAirline", reflect.TypeOf((*MockStore)(nil).CreateAirline), arg0, arg1)
}

// CreateAirportList mocks base method.
func (m *MockStore) CreateAirportList(arg0 context.Context, arg1 string) ([]db.Airport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAirportList", arg0, arg1)
	ret0, _ := ret[0].([]db.Airport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAirportList indicates an expected call of CreateAirportList.
func (mr *MockStoreMockRecorder) CreateAirportList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAirportList", reflect.TypeOf((*MockStore)(nil).CreateAirportList), arg0, arg1)
}

// CreateAirports mocks base method.
func (m *MockStore) CreateAirports(arg0 context.Context, arg1 db.CreateAirportsParams) (db.Airport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAirports", arg0, arg1)
	ret0, _ := ret[0].(db.Airport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAirports indicates an expected call of CreateAirports.
func (mr *MockStoreMockRecorder) CreateAirports(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAirports", reflect.TypeOf((*MockStore)(nil).CreateAirports), arg0, arg1)
}

// DeleteAircraft mocks base method.
func (m *MockStore) DeleteAircraft(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAircraft", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAircraft indicates an expected call of DeleteAircraft.
func (mr *MockStoreMockRecorder) DeleteAircraft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAircraft", reflect.TypeOf((*MockStore)(nil).DeleteAircraft), arg0, arg1)
}

// DeleteAirline mocks base method.
func (m *MockStore) DeleteAirline(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAirline", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAirline indicates an expected call of DeleteAirline.
func (mr *MockStoreMockRecorder) DeleteAirline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAirline", reflect.TypeOf((*MockStore)(nil).DeleteAirline), arg0, arg1)
}

// DeleteAirports mocks base method.
func (m *MockStore) DeleteAirports(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAirports", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAirports indicates an expected call of DeleteAirports.
func (mr *MockStoreMockRecorder) DeleteAirports(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAirports", reflect.TypeOf((*MockStore)(nil).DeleteAirports), arg0, arg1)
}

// GetAircraft mocks base method.
func (m *MockStore) GetAircraft(arg0 context.Context, arg1 int64) (db.Aircraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAircraft", arg0, arg1)
	ret0, _ := ret[0].(db.Aircraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAircraft indicates an expected call of GetAircraft.
func (mr *MockStoreMockRecorder) GetAircraft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAircraft", reflect.TypeOf((*MockStore)(nil).GetAircraft), arg0, arg1)
}

// GetAirline mocks base method.
func (m *MockStore) GetAirline(arg0 context.Context, arg1 int64) (db.Airline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAirline", arg0, arg1)
	ret0, _ := ret[0].(db.Airline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAirline indicates an expected call of GetAirline.
func (mr *MockStoreMockRecorder) GetAirline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAirline", reflect.TypeOf((*MockStore)(nil).GetAirline), arg0, arg1)
}

// ListAircraft mocks base method.
func (m *MockStore) ListAircraft(arg0 context.Context, arg1 db.ListAircraftParams) ([]db.Aircraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAircraft", arg0, arg1)
	ret0, _ := ret[0].([]db.Aircraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAircraft indicates an expected call of ListAircraft.
func (mr *MockStoreMockRecorder) ListAircraft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAircraft", reflect.TypeOf((*MockStore)(nil).ListAircraft), arg0, arg1)
}

// ListAirline mocks base method.
func (m *MockStore) ListAirline(arg0 context.Context, arg1 db.ListAirlineParams) ([]db.Airline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAirline", arg0, arg1)
	ret0, _ := ret[0].([]db.Airline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAirline indicates an expected call of ListAirline.
func (mr *MockStoreMockRecorder) ListAirline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAirline", reflect.TypeOf((*MockStore)(nil).ListAirline), arg0, arg1)
}

// ListAirports mocks base method.
func (m *MockStore) ListAirports(arg0 context.Context) ([]db.ListAirportsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAirports", arg0)
	ret0, _ := ret[0].([]db.ListAirportsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAirports indicates an expected call of ListAirports.
func (mr *MockStoreMockRecorder) ListAirports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAirports", reflect.TypeOf((*MockStore)(nil).ListAirports), arg0)
}
