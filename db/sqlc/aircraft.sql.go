// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: aircraft.sql

package db

import (
	"context"
)

const createAircraft = `-- name: CreateAircraft :one
INSERT INTO aircrafts (
iata_code, icao_code,  model, range, company_id
) VALUES (
  $1, $2, $3 ,$4 ,$5
)
RETURNING id, iata_code, icao_code, model, range, company_id, created_at
`

type CreateAircraftParams struct {
	IataCode  string `json:"iata_code"`
	IcaoCode  string `json:"icao_code"`
	Model     string `json:"model"`
	Range     int32  `json:"range"`
	CompanyID int64  `json:"company_id"`
}

func (q *Queries) CreateAircraft(ctx context.Context, arg CreateAircraftParams) (Aircraft, error) {
	row := q.queryRow(ctx, q.createAircraftStmt, createAircraft,
		arg.IataCode,
		arg.IcaoCode,
		arg.Model,
		arg.Range,
		arg.CompanyID,
	)
	var i Aircraft
	err := row.Scan(
		&i.ID,
		&i.IataCode,
		&i.IcaoCode,
		&i.Model,
		&i.Range,
		&i.CompanyID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAircraft = `-- name: DeleteAircraft :exec
DELETE FROM aircrafts
WHERE id = $1
`

func (q *Queries) DeleteAircraft(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteAircraftStmt, deleteAircraft, id)
	return err
}

const getAircraft = `-- name: GetAircraft :one
SELECT id, iata_code, icao_code, model, range, company_id, created_at FROM aircrafts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAircraft(ctx context.Context, id int64) (Aircraft, error) {
	row := q.queryRow(ctx, q.getAircraftStmt, getAircraft, id)
	var i Aircraft
	err := row.Scan(
		&i.ID,
		&i.IataCode,
		&i.IcaoCode,
		&i.Model,
		&i.Range,
		&i.CompanyID,
		&i.CreatedAt,
	)
	return i, err
}

const listAircraft = `-- name: ListAircraft :many
SELECT id, iata_code, icao_code, model, range, company_id, created_at FROM aircrafts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAircraftParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAircraft(ctx context.Context, arg ListAircraftParams) ([]Aircraft, error) {
	rows, err := q.query(ctx, q.listAircraftStmt, listAircraft, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Aircraft{}
	for rows.Next() {
		var i Aircraft
		if err := rows.Scan(
			&i.ID,
			&i.IataCode,
			&i.IcaoCode,
			&i.Model,
			&i.Range,
			&i.CompanyID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
