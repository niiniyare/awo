// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: aircraft.sql

package db

import (
	"context"
)

const createAircraft = `-- name: CreateAircraft :one
INSERT INTO aircrafts_data (
  aircraft_code, model, range, company_id
) VALUES (
  $1, $2, $3 ,$4
)
RETURNING aircraft_code, model, range, company_id, created_at
`

type CreateAircraftParams struct {
	AircraftCode string `json:"aircraft_code"`
	Model        string `json:"model"`
	Range        int32  `json:"range"`
	CompanyID    int64  `json:"company_id"`
}

func (q *Queries) CreateAircraft(ctx context.Context, arg CreateAircraftParams) (AircraftsDatum, error) {
	row := q.db.QueryRowContext(ctx, createAircraft,
		arg.AircraftCode,
		arg.Model,
		arg.Range,
		arg.CompanyID,
	)
	var i AircraftsDatum
	err := row.Scan(
		&i.AircraftCode,
		&i.Model,
		&i.Range,
		&i.CompanyID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAircraft = `-- name: DeleteAircraft :exec
DELETE FROM aircrafts_data
WHERE aircraft_code = $1
`

func (q *Queries) DeleteAircraft(ctx context.Context, aircraftCode string) error {
	_, err := q.db.ExecContext(ctx, deleteAircraft, aircraftCode)
	return err
}

const getAircraft = `-- name: GetAircraft :one
SELECT aircraft_code, model, range, company_id, created_at FROM aircrafts_data
WHERE aircraft_code = $1 LIMIT 1
`

func (q *Queries) GetAircraft(ctx context.Context, aircraftCode string) (AircraftsDatum, error) {
	row := q.db.QueryRowContext(ctx, getAircraft, aircraftCode)
	var i AircraftsDatum
	err := row.Scan(
		&i.AircraftCode,
		&i.Model,
		&i.Range,
		&i.CompanyID,
		&i.CreatedAt,
	)
	return i, err
}

const listAircraft = `-- name: ListAircraft :many
SELECT aircraft_code, model, range, company_id, created_at FROM aircrafts_data
ORDER BY name
`

func (q *Queries) ListAircraft(ctx context.Context) ([]AircraftsDatum, error) {
	rows, err := q.db.QueryContext(ctx, listAircraft)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AircraftsDatum{}
	for rows.Next() {
		var i AircraftsDatum
		if err := rows.Scan(
			&i.AircraftCode,
			&i.Model,
			&i.Range,
			&i.CompanyID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
