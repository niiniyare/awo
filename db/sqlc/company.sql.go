// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: company.sql

package db

import (
	"context"
)

const createAirline = `-- name: CreateAirline :one
INSERT INTO airline_company (
  company_name,
  iata_code,
  main_airport
) VALUES (
  $1, $2, $3
)
RETURNING company_id, company_name, iata_code, main_airport, created_at
`

type CreateAirlineParams struct {
	CompanyName string `json:"company_name"`
	IataCode    string `json:"iata_code"`
	MainAirport string `json:"main_airport"`
}

func (q *Queries) CreateAirline(ctx context.Context, arg CreateAirlineParams) (AirlineCompany, error) {
	row := q.db.QueryRowContext(ctx, createAirline, arg.CompanyName, arg.IataCode, arg.MainAirport)
	var i AirlineCompany
	err := row.Scan(
		&i.CompanyID,
		&i.CompanyName,
		&i.IataCode,
		&i.MainAirport,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAirline = `-- name: DeleteAirline :exec
DELETE FROM airline_company
WHERE company_id = $1
`

func (q *Queries) DeleteAirline(ctx context.Context, companyID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAirline, companyID)
	return err
}

const getAirline = `-- name: GetAirline :one
SELECT company_id, company_name, iata_code, main_airport, created_at FROM airline_company
WHERE company_id = $1 
LIMIT 1
`

func (q *Queries) GetAirline(ctx context.Context, companyID int64) (AirlineCompany, error) {
	row := q.db.QueryRowContext(ctx, getAirline, companyID)
	var i AirlineCompany
	err := row.Scan(
		&i.CompanyID,
		&i.CompanyName,
		&i.IataCode,
		&i.MainAirport,
		&i.CreatedAt,
	)
	return i, err
}

const listAirline = `-- name: ListAirline :many
SELECT company_id, company_name, iata_code, main_airport, created_at FROM airline_company
ORDER BY name
`

func (q *Queries) ListAirline(ctx context.Context) ([]AirlineCompany, error) {
	rows, err := q.db.QueryContext(ctx, listAirline)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AirlineCompany{}
	for rows.Next() {
		var i AirlineCompany
		if err := rows.Scan(
			&i.CompanyID,
			&i.CompanyName,
			&i.IataCode,
			&i.MainAirport,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
