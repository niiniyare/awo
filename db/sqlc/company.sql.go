// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: company.sql

package db

import (
	"context"
	"database/sql"
)

const createAirline = `-- name: CreateAirline :one
INSERT INTO airlines (
      company_name,
      iata_code, 
      icao_code, 
      callsign, 
      registared_country, 
      main_airport
) VALUES (
  $1, $2, $3, $4,$5,$6
)
RETURNING id, company_name, iata_code, icao_code, callsign, registared_country, main_airport, created_at, updated_at
`

type CreateAirlineParams struct {
	CompanyName       string         `json:"company_name"`
	IataCode          string         `json:"iata_code"`
	IcaoCode          sql.NullString `json:"icao_code"`
	Callsign          sql.NullString `json:"callsign"`
	RegistaredCountry sql.NullString `json:"registared_country"`
	MainAirport       string         `json:"main_airport"`
}

func (q *Queries) CreateAirline(ctx context.Context, arg CreateAirlineParams) (Airline, error) {
	row := q.db.QueryRow(ctx, createAirline,
		arg.CompanyName,
		arg.IataCode,
		arg.IcaoCode,
		arg.Callsign,
		arg.RegistaredCountry,
		arg.MainAirport,
	)
	var i Airline
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.IataCode,
		&i.IcaoCode,
		&i.Callsign,
		&i.RegistaredCountry,
		&i.MainAirport,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAirline = `-- name: DeleteAirline :exec
DELETE FROM airlines
WHERE id = $1
`

func (q *Queries) DeleteAirline(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAirline, id)
	return err
}

const getAirline = `-- name: GetAirline :one
SELECT id, company_name, iata_code, icao_code, callsign, registared_country, main_airport, created_at, updated_at FROM airlines
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetAirline(ctx context.Context, id int64) (Airline, error) {
	row := q.db.QueryRow(ctx, getAirline, id)
	var i Airline
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.IataCode,
		&i.IcaoCode,
		&i.Callsign,
		&i.RegistaredCountry,
		&i.MainAirport,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAirline = `-- name: ListAirline :many
SELECT id, company_name, iata_code, icao_code, callsign, registared_country, main_airport, created_at, updated_at FROM airlines
ORDER BY company_name
LIMIT $1
OFFSET $2
`

type ListAirlineParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAirline(ctx context.Context, arg ListAirlineParams) ([]Airline, error) {
	rows, err := q.db.Query(ctx, listAirline, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Airline{}
	for rows.Next() {
		var i Airline
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.IataCode,
			&i.IcaoCode,
			&i.Callsign,
			&i.RegistaredCountry,
			&i.MainAirport,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
