// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: flight.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createFlight = `-- name: createFlight :one
INSERT INTO flights (
    flight_no,
    company_id ,
    scheduled_departure  ,
    scheduled_arrival  ,
    departure_airport ,
    arrival_airport ,
    status ,
    aircraft_id ,
    actual_departure ,
    actual_arrival 
    


)
VALUES (
$1, $2, $3, $4, $5, $6, $7, $8, $9,$10
)
RETURNING flight_id, flight_no, company_id, scheduled_departure, scheduled_arrival, departure_airport, arrival_airport, status, aircraft_id, actual_departure, actual_arrival
`

type createFlightParams struct {
	FlightNo           string       `json:"flight_no"`
	CompanyID          int64        `json:"company_id"`
	ScheduledDeparture time.Time    `json:"scheduled_departure"`
	ScheduledArrival   time.Time    `json:"scheduled_arrival"`
	DepartureAirport   string       `json:"departure_airport"`
	ArrivalAirport     string       `json:"arrival_airport"`
	Status             string       `json:"status"`
	AircraftID         int64        `json:"aircraft_id"`
	ActualDeparture    sql.NullTime `json:"actual_departure"`
	ActualArrival      sql.NullTime `json:"actual_arrival"`
}

func (q *Queries) createFlight(ctx context.Context, arg createFlightParams) (Flight, error) {
	row := q.db.QueryRow(ctx, createFlight,
		arg.FlightNo,
		arg.CompanyID,
		arg.ScheduledDeparture,
		arg.ScheduledArrival,
		arg.DepartureAirport,
		arg.ArrivalAirport,
		arg.Status,
		arg.AircraftID,
		arg.ActualDeparture,
		arg.ActualArrival,
	)
	var i Flight
	err := row.Scan(
		&i.FlightID,
		&i.FlightNo,
		&i.CompanyID,
		&i.ScheduledDeparture,
		&i.ScheduledArrival,
		&i.DepartureAirport,
		&i.ArrivalAirport,
		&i.Status,
		&i.AircraftID,
		&i.ActualDeparture,
		&i.ActualArrival,
	)
	return i, err
}
