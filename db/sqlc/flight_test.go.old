package db

import (
	"context"
	"fmt"
	"testing"

	gf "github.com/brianvoe/gofakeit"
	"github.com/stretchr/testify/assert"
)

func TestQueries_CreateFlight(t *testing.T) {
	airline := CreateTestAirline(t)

	airport := CreateRandomAirport(t)

	airport1 := CreateRandomAirport(t)

	aircraft := CreateRandomAircraft(t)
	gf.Seed(0)
	type fields struct {
		db DBTX
	}
	type args struct {
		ctx context.Context
		arg CreateFlightParams
	}
	tests := []struct {
		name      string
		fields    fields
		args      args
		want      Flight
		assertion assert.ErrorAssertionFunc
	}{
		// TODO: Add test cases.
		name: "Create Flight",
		fields: {
			db: testQueries.db,
		},
		args: {
			context: context.Background(),
			arg: CreateFlightParams{
				FlightNo:           "AA7346",
				CompanyID:          airline.ID,
				ScheduledDeparture: gf.Date(),
				ScheduledArrival:   gf.Date(),
				DepartureAirport:   airport.IataCode,
				ArrivalAirport:     airport1.IataCode,
				Status:             "scheduled ",
				AircraftID:         aircraft.ID,
			},

			//	AircraftID
			//	ActualDeparture
			//	ActualArrival
		},
	}
	for _, tt := range tests {
		q := &Queries{
			db: tt.fields.db,
		}
		got, err := q.CreateFlight(tt.args.ctx, tt.args.arg)
		tt.assertion(t, err, fmt.Sprintf("%q. Queries.CreateFlight()", tt.name))
		assert.Equalf(t, tt.want, got, "%q. Queries.CreateFlight()", tt.name)
	}
}
