// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: seat.sql

package db

import (
	"context"
)

const createSeat = `-- name: CreateSeat :one
INSERT INTO seats ( 
aircraft_id, 
seat_no, 
fare_conditions)
VALUES($1, $2, $3)
RETURNING aircraft_id, seat_no, fare_conditions
`

type CreateSeatParams struct {
	AircraftID     int64  `json:"aircraft_id"`
	SeatNo         string `json:"seat_no"`
	FareConditions string `json:"fare_conditions"`
}

func (q *Queries) CreateSeat(ctx context.Context, arg CreateSeatParams) (Seat, error) {
	row := q.db.QueryRow(ctx, createSeat, arg.AircraftID, arg.SeatNo, arg.FareConditions)
	var i Seat
	err := row.Scan(&i.AircraftID, &i.SeatNo, &i.FareConditions)
	return i, err
}

const getSeats = `-- name: GetSeats :many
SELECT aircraft_id, seat_no, fare_conditions FROM seats
`

func (q *Queries) GetSeats(ctx context.Context) ([]Seat, error) {
	rows, err := q.db.Query(ctx, getSeats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Seat{}
	for rows.Next() {
		var i Seat
		if err := rows.Scan(&i.AircraftID, &i.SeatNo, &i.FareConditions); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
