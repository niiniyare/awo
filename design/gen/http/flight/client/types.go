// Code generated by goa v3.10.2, DO NOT EDIT.
//
// flight HTTP client types
//
// Command:
// $ goa gen github.com/niiniyare/awo/design -o design

package client

import (
	flight "github.com/niiniyare/awo/design/gen/flight"
	flightviews "github.com/niiniyare/awo/design/gen/flight/views"
	goa "goa.design/goa/v3/pkg"
)

// SearchRequestBody is the type of the "flight" service "search" endpoint HTTP
// request body.
type SearchRequestBody struct {
	// Origin airport code
	Origin string `form:"origin" json:"origin" xml:"origin"`
	// Destination airport code
	Destination string `form:"destination" json:"destination" xml:"destination"`
	// Departure date and time
	DepartureDate string `form:"departure_date" json:"departure_date" xml:"departure_date"`
	// Return date and time (for round trip searches)
	ReturnDate *string `form:"return_date,omitempty" json:"return_date,omitempty" xml:"return_date,omitempty"`
	// True for one-way searches, false for round trip searches
	OneWay bool `form:"one_way" json:"one_way" xml:"one_way"`
}

// SearchResponseBody is the type of the "flight" service "search" endpoint
// HTTP response body.
type SearchResponseBody []*FlightresultResponse

// FlightresultResponse is used to define fields on response body types.
type FlightresultResponse struct {
	// Unique Flight Booking Identifier
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Origin Airport Code
	Origin *string `form:"origin,omitempty" json:"origin,omitempty" xml:"origin,omitempty"`
	// Destination Airport Code
	Destination *string `form:"destination,omitempty" json:"destination,omitempty" xml:"destination,omitempty"`
	// Departure Date (YYYY-MM-DD)
	DepartureDate *string `form:"departure_date,omitempty" json:"departure_date,omitempty" xml:"departure_date,omitempty"`
	// Return Date (YYYY-MM-DD)
	ReturnDate *string `form:"return_date,omitempty" json:"return_date,omitempty" xml:"return_date,omitempty"`
	// Status of the booking (pending, confirmed, cancelled)
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// NewSearchRequestBody builds the HTTP request body from the payload of the
// "search" endpoint of the "flight" service.
func NewSearchRequestBody(p *flight.FlightSearchRequestPrams) *SearchRequestBody {
	body := &SearchRequestBody{
		Origin:        p.Origin,
		Destination:   p.Destination,
		DepartureDate: p.DepartureDate,
		ReturnDate:    p.ReturnDate,
		OneWay:        p.OneWay,
	}
	return body
}

// NewSearchFlightresultCollectionOK builds a "flight" service "search"
// endpoint result from a HTTP "OK" response.
func NewSearchFlightresultCollectionOK(body SearchResponseBody) flightviews.FlightresultCollectionView {
	v := make([]*flightviews.FlightresultView, len(body))
	for i, val := range body {
		v[i] = unmarshalFlightresultResponseToFlightviewsFlightresultView(val)
	}

	return v
}

// ValidateFlightresultResponse runs the validations defined on
// FlightresultResponse
func ValidateFlightresultResponse(body *FlightresultResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Origin == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("origin", "body"))
	}
	if body.Destination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("destination", "body"))
	}
	if body.DepartureDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("departure_date", "body"))
	}
	if body.ReturnDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("return_date", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	return
}
