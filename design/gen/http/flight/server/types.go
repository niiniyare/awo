// Code generated by goa v3.10.2, DO NOT EDIT.
//
// flight HTTP server types
//
// Command:
// $ goa gen github.com/niiniyare/awo/design -o design

package server

import (
	"unicode/utf8"

	flight "github.com/niiniyare/awo/design/gen/flight"
	flightviews "github.com/niiniyare/awo/design/gen/flight/views"
	goa "goa.design/goa/v3/pkg"
)

// SearchRequestBody is the type of the "flight" service "search" endpoint HTTP
// request body.
type SearchRequestBody struct {
	// Origin airport code
	Origin *string `form:"origin,omitempty" json:"origin,omitempty" xml:"origin,omitempty"`
	// Destination airport code
	Destination *string `form:"destination,omitempty" json:"destination,omitempty" xml:"destination,omitempty"`
	// Departure date and time
	DepartureDate *string `form:"departure_date,omitempty" json:"departure_date,omitempty" xml:"departure_date,omitempty"`
	// Return date and time (for round trip searches)
	ReturnDate *string `form:"return_date,omitempty" json:"return_date,omitempty" xml:"return_date,omitempty"`
	// True for one-way searches, false for round trip searches
	OneWay *bool `form:"one_way,omitempty" json:"one_way,omitempty" xml:"one_way,omitempty"`
}

// FlightresultResponseCollection is the type of the "flight" service "search"
// endpoint HTTP response body.
type FlightresultResponseCollection []*FlightresultResponse

// FlightresultResponse is used to define fields on response body types.
type FlightresultResponse struct {
	// Unique Flight Booking Identifier
	ID int `form:"id" json:"id" xml:"id"`
	// Origin Airport Code
	Origin string `form:"origin" json:"origin" xml:"origin"`
	// Destination Airport Code
	Destination string `form:"destination" json:"destination" xml:"destination"`
	// Departure Date (YYYY-MM-DD)
	DepartureDate string `form:"departure_date" json:"departure_date" xml:"departure_date"`
	// Return Date (YYYY-MM-DD)
	ReturnDate string `form:"return_date" json:"return_date" xml:"return_date"`
}

// NewFlightresultResponseCollection builds the HTTP response body from the
// result of the "search" endpoint of the "flight" service.
func NewFlightresultResponseCollection(res flightviews.FlightresultCollectionView) FlightresultResponseCollection {
	body := make([]*FlightresultResponse, len(res))
	for i, val := range res {
		body[i] = marshalFlightviewsFlightresultViewToFlightresultResponse(val)
	}
	return body
}

// NewSearchFlightSearchRequestPrams builds a flight service search endpoint
// payload.
func NewSearchFlightSearchRequestPrams(body *SearchRequestBody) *flight.FlightSearchRequestPrams {
	v := &flight.FlightSearchRequestPrams{
		Origin:        *body.Origin,
		Destination:   *body.Destination,
		DepartureDate: *body.DepartureDate,
		ReturnDate:    body.ReturnDate,
		OneWay:        *body.OneWay,
	}

	return v
}

// ValidateSearchRequestBody runs the validations defined on SearchRequestBody
func ValidateSearchRequestBody(body *SearchRequestBody) (err error) {
	if body.Origin == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("origin", "body"))
	}
	if body.Destination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("destination", "body"))
	}
	if body.DepartureDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("departure_date", "body"))
	}
	if body.OneWay == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("one_way", "body"))
	}
	if body.Origin != nil {
		if utf8.RuneCountInString(*body.Origin) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.origin", *body.Origin, utf8.RuneCountInString(*body.Origin), 3, true))
		}
	}
	if body.Origin != nil {
		if utf8.RuneCountInString(*body.Origin) > 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.origin", *body.Origin, utf8.RuneCountInString(*body.Origin), 3, false))
		}
	}
	if body.Destination != nil {
		if utf8.RuneCountInString(*body.Destination) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.destination", *body.Destination, utf8.RuneCountInString(*body.Destination), 3, true))
		}
	}
	if body.Destination != nil {
		if utf8.RuneCountInString(*body.Destination) > 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.destination", *body.Destination, utf8.RuneCountInString(*body.Destination), 3, false))
		}
	}
	return
}
