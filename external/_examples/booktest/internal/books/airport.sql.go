// Code generated by sqlc. DO NOT EDIT.
// source: airport.sql

package books

import (
	"context"
)

const createAirportList = `-- name: CreateAirportList :many
INSERT INTO airports_data (
  airport_code , 
  airport_name ,
  city , 
  coordinates
) VALUES (
  $1 , $2 , $3 , $4
)
RETURNING airport_code, airport_name, city, coordinates, timezone
`

type CreateAirportListParams struct {
	AirportCode string
	AirportName string
	City        string
	Coordinates string
}

func (q *Queries) CreateAirportList(ctx context.Context, arg CreateAirportListParams) ([]AirportsDatum, error) {
	rows, err := q.db.QueryContext(ctx, createAirportList,
		arg.AirportCode,
		arg.AirportName,
		arg.City,
		arg.Coordinates,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AirportsDatum
	for rows.Next() {
		var i AirportsDatum
		if err := rows.Scan(
			&i.AirportCode,
			&i.AirportName,
			&i.City,
			&i.Coordinates,
			&i.Timezone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createAirports = `-- name: CreateAirports :one
INSERT INTO airports_data (
  airport_code , 
  airport_name ,
  city , 
  
  
  coordinates
) VALUES (
  $1 , $2 , $3 , $4
)
RETURNING airport_code, airport_name, city, coordinates, timezone
`

type CreateAirportsParams struct {
	AirportCode string
	AirportName string
	City        string
	Coordinates string
}

func (q *Queries) CreateAirports(ctx context.Context, arg CreateAirportsParams) (AirportsDatum, error) {
	row := q.db.QueryRowContext(ctx, createAirports,
		arg.AirportCode,
		arg.AirportName,
		arg.City,
		arg.Coordinates,
	)
	var i AirportsDatum
	err := row.Scan(
		&i.AirportCode,
		&i.AirportName,
		&i.City,
		&i.Coordinates,
		&i.Timezone,
	)
	return i, err
}

const deleteAirports = `-- name: DeleteAirports :exec
DELETE FROM airports_data
WHERE airport_code  = $1
RETURNING airport_code, airport_name, city, coordinates, timezone
`

func (q *Queries) DeleteAirports(ctx context.Context, airportCode string) error {
	_, err := q.db.ExecContext(ctx, deleteAirports, airportCode)
	return err
}

const getAirports = `-- name: GetAirports :one
SELECT airport_code, airport_name, city, coordinates, timezone FROM airports_data
WHERE airport_code  = $1 LIMIT 1
`

func (q *Queries) GetAirports(ctx context.Context, airportCode string) (AirportsDatum, error) {
	row := q.db.QueryRowContext(ctx, getAirports, airportCode)
	var i AirportsDatum
	err := row.Scan(
		&i.AirportCode,
		&i.AirportName,
		&i.City,
		&i.Coordinates,
		&i.Timezone,
	)
	return i, err
}

const listAirports = `-- name: ListAirports :many
SELECT airport_code,
  airport_name ,
  city
FROM airports_data
ORDER BY airport_code
`

type ListAirportsRow struct {
	AirportCode string
	AirportName string
	City        string
}

func (q *Queries) ListAirports(ctx context.Context) ([]ListAirportsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAirports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAirportsRow
	for rows.Next() {
		var i ListAirportsRow
		if err := rows.Scan(&i.AirportCode, &i.AirportName, &i.City); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
