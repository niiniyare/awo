// Code generated by sqlc. DO NOT EDIT.
// source: flight.sql

package postgres

import (
	"context"
	"time"
)

const deleteFlight = `-- name: DeleteFlight :exec
DELETE FROM flights_v
WHERE flight_id  = $1
RETURNING flight_no
`

func (q *Queries) DeleteFlight(ctx context.Context, flightID int32) error {
	_, err := q.db.ExecContext(ctx, deleteFlight, flightID)
	return err
}

const getFlightByCode = `-- name: GetFlightByCode :one
SELECT flight_id, flight_no, company_id, scheduled_departure, scheduled_departure_local, scheduled_arrival, scheduled_arrival_local, scheduled_duration, departure_airport, departure_airport_name, departure_city, arrival_airport, arrival_airport_name, arrival_city, status, aircraft_code, actual_departure, actual_departure_local, actual_arrival, actual_arrival_local, actual_duration FROM flights_v
WHERE departure_airport  = $1 
AND arrival_airport = $2
AND scheduled_departure =$3
AND scheduled_arrival = $4
LIMIT 1
`

type GetFlightByCodeParams struct {
	DepartureAirport   string    `json:"departure_airport"`
	ArrivalAirport     string    `json:"arrival_airport"`
	ScheduledDeparture time.Time `json:"scheduled_departure"`
	ScheduledArrival   time.Time `json:"scheduled_arrival"`
}

func (q *Queries) GetFlightByCode(ctx context.Context, arg GetFlightByCodeParams) (FlightsV, error) {
	row := q.db.QueryRowContext(ctx, getFlightByCode,
		arg.DepartureAirport,
		arg.ArrivalAirport,
		arg.ScheduledDeparture,
		arg.ScheduledArrival,
	)
	var i FlightsV
	err := row.Scan(
		&i.FlightID,
		&i.FlightNo,
		&i.CompanyID,
		&i.ScheduledDeparture,
		&i.ScheduledDepartureLocal,
		&i.ScheduledArrival,
		&i.ScheduledArrivalLocal,
		&i.ScheduledDuration,
		&i.DepartureAirport,
		&i.DepartureAirportName,
		&i.DepartureCity,
		&i.ArrivalAirport,
		&i.ArrivalAirportName,
		&i.ArrivalCity,
		&i.Status,
		&i.AircraftCode,
		&i.ActualDeparture,
		&i.ActualDepartureLocal,
		&i.ActualArrival,
		&i.ActualArrivalLocal,
		&i.ActualDuration,
	)
	return i, err
}

const getFlightListByName = `-- name: GetFlightListByName :many
SELECT f.flight_id, f.flight_no, f.company_id, f.scheduled_departure, f.scheduled_departure_local, f.scheduled_arrival, f.scheduled_arrival_local, f.scheduled_duration, f.departure_airport, f.departure_airport_name, f.departure_city, f.arrival_airport, f.arrival_airport_name, f.arrival_city, f.status, f.aircraft_code, f.actual_departure, f.actual_departure_local, f.actual_arrival, f.actual_arrival_local, f.actual_duration 
FROM flights_v f 
WHERE f.departure_city = $1
AND f.arrival_city = $2
AND f.scheduled_departure > now() 
ORDER BY f.scheduled_departure LIMIT 1
`

type GetFlightListByNameParams struct {
	DepartureCity string `json:"departure_city"`
	ArrivalCity   string `json:"arrival_city"`
}

func (q *Queries) GetFlightListByName(ctx context.Context, arg GetFlightListByNameParams) ([]FlightsV, error) {
	rows, err := q.db.QueryContext(ctx, getFlightListByName, arg.DepartureCity, arg.ArrivalCity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FlightsV{}
	for rows.Next() {
		var i FlightsV
		if err := rows.Scan(
			&i.FlightID,
			&i.FlightNo,
			&i.CompanyID,
			&i.ScheduledDeparture,
			&i.ScheduledDepartureLocal,
			&i.ScheduledArrival,
			&i.ScheduledArrivalLocal,
			&i.ScheduledDuration,
			&i.DepartureAirport,
			&i.DepartureAirportName,
			&i.DepartureCity,
			&i.ArrivalAirport,
			&i.ArrivalAirportName,
			&i.ArrivalCity,
			&i.Status,
			&i.AircraftCode,
			&i.ActualDeparture,
			&i.ActualDepartureLocal,
			&i.ActualArrival,
			&i.ActualArrivalLocal,
			&i.ActualDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlightByArrivalTime = `-- name: ListFlightByArrivalTime :many
SELECT flight_id, flight_no, company_id, scheduled_departure, scheduled_departure_local, scheduled_arrival, scheduled_arrival_local, scheduled_duration, departure_airport, departure_airport_name, departure_city, arrival_airport, arrival_airport_name, arrival_city, status, aircraft_code, actual_departure, actual_departure_local, actual_arrival, actual_arrival_local, actual_duration
FROM flights_v
ORDER BY scheduled_arrival
`

func (q *Queries) ListFlightByArrivalTime(ctx context.Context) ([]FlightsV, error) {
	rows, err := q.db.QueryContext(ctx, listFlightByArrivalTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FlightsV{}
	for rows.Next() {
		var i FlightsV
		if err := rows.Scan(
			&i.FlightID,
			&i.FlightNo,
			&i.CompanyID,
			&i.ScheduledDeparture,
			&i.ScheduledDepartureLocal,
			&i.ScheduledArrival,
			&i.ScheduledArrivalLocal,
			&i.ScheduledDuration,
			&i.DepartureAirport,
			&i.DepartureAirportName,
			&i.DepartureCity,
			&i.ArrivalAirport,
			&i.ArrivalAirportName,
			&i.ArrivalCity,
			&i.Status,
			&i.AircraftCode,
			&i.ActualDeparture,
			&i.ActualDepartureLocal,
			&i.ActualArrival,
			&i.ActualArrivalLocal,
			&i.ActualDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlightByDepartureTime = `-- name: ListFlightByDepartureTime :many
SELECT flight_id, flight_no, company_id, scheduled_departure, scheduled_departure_local, scheduled_arrival, scheduled_arrival_local, scheduled_duration, departure_airport, departure_airport_name, departure_city, arrival_airport, arrival_airport_name, arrival_city, status, aircraft_code, actual_departure, actual_departure_local, actual_arrival, actual_arrival_local, actual_duration
FROM flights_v
ORDER BY departure_airport
`

func (q *Queries) ListFlightByDepartureTime(ctx context.Context) ([]FlightsV, error) {
	rows, err := q.db.QueryContext(ctx, listFlightByDepartureTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FlightsV{}
	for rows.Next() {
		var i FlightsV
		if err := rows.Scan(
			&i.FlightID,
			&i.FlightNo,
			&i.CompanyID,
			&i.ScheduledDeparture,
			&i.ScheduledDepartureLocal,
			&i.ScheduledArrival,
			&i.ScheduledArrivalLocal,
			&i.ScheduledDuration,
			&i.DepartureAirport,
			&i.DepartureAirportName,
			&i.DepartureCity,
			&i.ArrivalAirport,
			&i.ArrivalAirportName,
			&i.ArrivalCity,
			&i.Status,
			&i.AircraftCode,
			&i.ActualDeparture,
			&i.ActualDepartureLocal,
			&i.ActualArrival,
			&i.ActualArrivalLocal,
			&i.ActualDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlightByDuration = `-- name: ListFlightByDuration :many
SELECT flight_id, flight_no, company_id, scheduled_departure, scheduled_departure_local, scheduled_arrival, scheduled_arrival_local, scheduled_duration, departure_airport, departure_airport_name, departure_city, arrival_airport, arrival_airport_name, arrival_city, status, aircraft_code, actual_departure, actual_departure_local, actual_arrival, actual_arrival_local, actual_duration
FROM flights_v
ORDER BY scheduled_duration
`

func (q *Queries) ListFlightByDuration(ctx context.Context) ([]FlightsV, error) {
	rows, err := q.db.QueryContext(ctx, listFlightByDuration)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FlightsV{}
	for rows.Next() {
		var i FlightsV
		if err := rows.Scan(
			&i.FlightID,
			&i.FlightNo,
			&i.CompanyID,
			&i.ScheduledDeparture,
			&i.ScheduledDepartureLocal,
			&i.ScheduledArrival,
			&i.ScheduledArrivalLocal,
			&i.ScheduledDuration,
			&i.DepartureAirport,
			&i.DepartureAirportName,
			&i.DepartureCity,
			&i.ArrivalAirport,
			&i.ArrivalAirportName,
			&i.ArrivalCity,
			&i.Status,
			&i.AircraftCode,
			&i.ActualDeparture,
			&i.ActualDepartureLocal,
			&i.ActualArrival,
			&i.ActualArrivalLocal,
			&i.ActualDuration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
