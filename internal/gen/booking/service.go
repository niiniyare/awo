// Code generated by goa v3.10.2, DO NOT EDIT.
//
// booking service
//
// Command:
// $ goa gen github.com/niiniyare/awo/internal/design -o internal

package booking

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Service is the booking service interface.
type Service interface {
	// Book a flight using IATA NDC standard
	Book(context.Context, *BookingFlightPrams) (res *FlightBooking, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "booking"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"book"}

// BookingFlightPrams is the payload type of the booking service book method.
type BookingFlightPrams struct {
	// Origin airport code
	Origin string
	// Destination airport code
	Destination string
	// Departure date and time
	DepartureDate string
	// Return date and time (for round trip searches)
	ReturnDate *string
	// True for one-way searches, false for round trip searches
	OneWay bool
}

// FlightBooking is the result type of the booking service book method.
type FlightBooking struct {
	// Unique Flight Booking Identifier
	ID int
	// Origin Airport Code
	Origin string
	// Destination Airport Code
	Destination string
	// Departure Date (YYYY-MM-DD)
	DepartureDate string
	// Return Date (YYYY-MM-DD)
	ReturnDate string
	// Status of the booking (pending, confirmed, cancelled)
	Status string
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotFound", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "BadRequest", false, false, false)
}
