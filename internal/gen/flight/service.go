// Code generated by goa v3.10.2, DO NOT EDIT.
//
// flight service
//
// Command:
// $ goa gen github.com/niiniyare/awo/internal/design -o internal

package flight

import (
	"context"

	flightviews "github.com/niiniyare/awo/internal/gen/flight/views"
	goa "goa.design/goa/v3/pkg"
)

// Service is the flight service interface.
type Service interface {
	// create flight
	Create(context.Context) (err error)
	// Search for available flights
	Search(context.Context, *FlightSearchRequestPrams) (res FlightresultCollection, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "flight"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"create", "search"}

// FlightSearchRequestPrams is the payload type of the flight service search
// method.
type FlightSearchRequestPrams struct {
	// Origin airport code
	Origin string
	// Destination airport code
	Destination string
	// Departure date and time
	DepartureDate string
	// Return date and time (for round trip searches)
	ReturnDate *string
	// True for one-way searches, false for round trip searches
	OneWay bool
}

type Flightresult struct {
	// Unique Flight Booking Identifier
	ID int
	// Origin Airport Code
	Origin string
	// Destination Airport Code
	Destination string
	// Departure Date (YYYY-MM-DD)
	DepartureDate string
	// Return Date (YYYY-MM-DD)
	ReturnDate string
	// Status of the booking (pending, confirmed, cancelled)
	Status string
}

// FlightresultCollection is the result type of the flight service search
// method.
type FlightresultCollection []*Flightresult

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotFound", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "BadRequest", false, false, false)
}

// NewFlightresultCollection initializes result type FlightresultCollection
// from viewed result type FlightresultCollection.
func NewFlightresultCollection(vres flightviews.FlightresultCollection) FlightresultCollection {
	return newFlightresultCollection(vres.Projected)
}

// NewViewedFlightresultCollection initializes viewed result type
// FlightresultCollection from result type FlightresultCollection using the
// given view.
func NewViewedFlightresultCollection(res FlightresultCollection, view string) flightviews.FlightresultCollection {
	p := newFlightresultCollectionView(res)
	return flightviews.FlightresultCollection{Projected: p, View: "default"}
}

// newFlightresultCollection converts projected type FlightresultCollection to
// service type FlightresultCollection.
func newFlightresultCollection(vres flightviews.FlightresultCollectionView) FlightresultCollection {
	res := make(FlightresultCollection, len(vres))
	for i, n := range vres {
		res[i] = newFlightresult(n)
	}
	return res
}

// newFlightresultCollectionView projects result type FlightresultCollection to
// projected type FlightresultCollectionView using the "default" view.
func newFlightresultCollectionView(res FlightresultCollection) flightviews.FlightresultCollectionView {
	vres := make(flightviews.FlightresultCollectionView, len(res))
	for i, n := range res {
		vres[i] = newFlightresultView(n)
	}
	return vres
}

// newFlightresult converts projected type Flightresult to service type
// Flightresult.
func newFlightresult(vres *flightviews.FlightresultView) *Flightresult {
	res := &Flightresult{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Origin != nil {
		res.Origin = *vres.Origin
	}
	if vres.Destination != nil {
		res.Destination = *vres.Destination
	}
	if vres.DepartureDate != nil {
		res.DepartureDate = *vres.DepartureDate
	}
	if vres.ReturnDate != nil {
		res.ReturnDate = *vres.ReturnDate
	}
	return res
}

// newFlightresultView projects result type Flightresult to projected type
// FlightresultView using the "default" view.
func newFlightresultView(res *Flightresult) *flightviews.FlightresultView {
	vres := &flightviews.FlightresultView{
		ID:            &res.ID,
		Origin:        &res.Origin,
		Destination:   &res.Destination,
		DepartureDate: &res.DepartureDate,
		ReturnDate:    &res.ReturnDate,
	}
	return vres
}
