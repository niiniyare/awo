// Code generated by goa v3.10.2, DO NOT EDIT.
//
// booking HTTP client CLI support package
//
// Command:
// $ goa gen github.com/niiniyare/awo/internal/design -o internal

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	booking "github.com/niiniyare/awo/internal/gen/booking"
	goa "goa.design/goa/v3/pkg"
)

// BuildBookPayload builds the payload for the booking book endpoint from CLI
// flags.
func BuildBookPayload(bookingBookBody string) (*booking.BookingFlightPrams, error) {
	var err error
	var body BookRequestBody
	{
		err = json.Unmarshal([]byte(bookingBookBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"departure_date\": \"Est qui ratione dolor vel debitis.\",\n      \"destination\": \"23m\",\n      \"one_way\": false,\n      \"origin\": \"r92\",\n      \"return_date\": \"Officia dolorem ut maiores optio aliquid et.\"\n   }'")
		}
		if utf8.RuneCountInString(body.Origin) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.origin", body.Origin, utf8.RuneCountInString(body.Origin), 3, true))
		}
		if utf8.RuneCountInString(body.Origin) > 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.origin", body.Origin, utf8.RuneCountInString(body.Origin), 3, false))
		}
		if utf8.RuneCountInString(body.Destination) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.destination", body.Destination, utf8.RuneCountInString(body.Destination), 3, true))
		}
		if utf8.RuneCountInString(body.Destination) > 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.destination", body.Destination, utf8.RuneCountInString(body.Destination), 3, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &booking.BookingFlightPrams{
		Origin:        body.Origin,
		Destination:   body.Destination,
		DepartureDate: body.DepartureDate,
		ReturnDate:    body.ReturnDate,
		OneWay:        body.OneWay,
	}

	return v, nil
}
