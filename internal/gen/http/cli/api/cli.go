// Code generated by goa v3.10.2, DO NOT EDIT.
//
// api HTTP client CLI support package
//
// Command:
// $ goa gen github.com/niiniyare/awo/internal/design -o internal

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	bookingc "github.com/niiniyare/awo/internal/gen/http/booking/client"
	flightc "github.com/niiniyare/awo/internal/gen/http/flight/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `flight (create|search)
booking book
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` flight create` + "\n" +
		os.Args[0] + ` booking book --body '{
      "departure_date": "Est qui ratione dolor vel debitis.",
      "destination": "23m",
      "one_way": false,
      "origin": "r92",
      "return_date": "Officia dolorem ut maiores optio aliquid et."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		flightFlags = flag.NewFlagSet("flight", flag.ContinueOnError)

		flightCreateFlags = flag.NewFlagSet("create", flag.ExitOnError)

		flightSearchFlags    = flag.NewFlagSet("search", flag.ExitOnError)
		flightSearchBodyFlag = flightSearchFlags.String("body", "REQUIRED", "")

		bookingFlags = flag.NewFlagSet("booking", flag.ContinueOnError)

		bookingBookFlags    = flag.NewFlagSet("book", flag.ExitOnError)
		bookingBookBodyFlag = bookingBookFlags.String("body", "REQUIRED", "")
	)
	flightFlags.Usage = flightUsage
	flightCreateFlags.Usage = flightCreateUsage
	flightSearchFlags.Usage = flightSearchUsage

	bookingFlags.Usage = bookingUsage
	bookingBookFlags.Usage = bookingBookUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "flight":
			svcf = flightFlags
		case "booking":
			svcf = bookingFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "flight":
			switch epn {
			case "create":
				epf = flightCreateFlags

			case "search":
				epf = flightSearchFlags

			}

		case "booking":
			switch epn {
			case "book":
				epf = bookingBookFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "flight":
			c := flightc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data = nil
			case "search":
				endpoint = c.Search()
				data, err = flightc.BuildSearchPayload(*flightSearchBodyFlag)
			}
		case "booking":
			c := bookingc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "book":
				endpoint = c.Book()
				data, err = bookingc.BuildBookPayload(*bookingBookBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// flightUsage displays the usage of the flight command and its subcommands.
func flightUsage() {
	fmt.Fprintf(os.Stderr, `Service is the flight service interface.
Usage:
    %[1]s [globalflags] flight COMMAND [flags]

COMMAND:
    create: create flight
    search: Search for available flights

Additional help:
    %[1]s flight COMMAND --help
`, os.Args[0])
}
func flightCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] flight create

create flight

Example:
    %[1]s flight create
`, os.Args[0])
}

func flightSearchUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] flight search -body JSON

Search for available flights
    -body JSON: 

Example:
    %[1]s flight search --body '{
      "departure_date": "Magni enim ad.",
      "destination": "bln",
      "one_way": false,
      "origin": "ju0",
      "return_date": "Enim vitae corrupti illum vitae."
   }'
`, os.Args[0])
}

// bookingUsage displays the usage of the booking command and its subcommands.
func bookingUsage() {
	fmt.Fprintf(os.Stderr, `Service is the booking service interface.
Usage:
    %[1]s [globalflags] booking COMMAND [flags]

COMMAND:
    book: Book a flight using IATA NDC standard

Additional help:
    %[1]s booking COMMAND --help
`, os.Args[0])
}
func bookingBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] booking book -body JSON

Book a flight using IATA NDC standard
    -body JSON: 

Example:
    %[1]s booking book --body '{
      "departure_date": "Est qui ratione dolor vel debitis.",
      "destination": "23m",
      "one_way": false,
      "origin": "r92",
      "return_date": "Officia dolorem ut maiores optio aliquid et."
   }'
`, os.Args[0])
}
