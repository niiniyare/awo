// Code generated by goa v3.10.2, DO NOT EDIT.
//
// flight HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/niiniyare/awo/internal/design -o internal

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	flight "github.com/niiniyare/awo/internal/gen/flight"
	flightviews "github.com/niiniyare/awo/internal/gen/flight/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "flight" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateFlightPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("flight", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeCreateResponse returns a decoder for responses returned by the flight
// create endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("flight", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildSearchRequest instantiates a HTTP request object with method and path
// set to call the "flight" service "search" endpoint
func (c *Client) BuildSearchRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SearchFlightPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("flight", "search", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSearchRequest returns an encoder for requests sent to the flight
// search server.
func EncodeSearchRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*flight.FlightSearchRequestPrams)
		if !ok {
			return goahttp.ErrInvalidType("flight", "search", "*flight.FlightSearchRequestPrams", v)
		}
		body := NewSearchRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("flight", "search", err)
		}
		return nil
	}
}

// DecodeSearchResponse returns a decoder for responses returned by the flight
// search endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeSearchResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SearchResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("flight", "search", err)
			}
			p := NewSearchFlightresultCollectionOK(body)
			view := "default"
			vres := flightviews.FlightresultCollection{Projected: p, View: view}
			if err = flightviews.ValidateFlightresultCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("flight", "search", err)
			}
			res := flight.NewFlightresultCollection(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("flight", "search", resp.StatusCode, string(body))
		}
	}
}

// unmarshalFlightresultResponseToFlightviewsFlightresultView builds a value of
// type *flightviews.FlightresultView from a value of type
// *FlightresultResponse.
func unmarshalFlightresultResponseToFlightviewsFlightresultView(v *FlightresultResponse) *flightviews.FlightresultView {
	res := &flightviews.FlightresultView{
		ID:            v.ID,
		Origin:        v.Origin,
		Destination:   v.Destination,
		DepartureDate: v.DepartureDate,
		ReturnDate:    v.ReturnDate,
		Status:        v.Status,
	}

	return res
}
