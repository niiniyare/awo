// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AirportServiceClient is the client API for AirportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirportServiceClient interface {
	CreateAirports(ctx context.Context, in *CreateAirportsRequest, opts ...grpc.CallOption) (*CreateAirportsReply, error)
	DeleteAirports(ctx context.Context, in *DeleteAirportsRequest, opts ...grpc.CallOption) (*DeleteAirportsReply, error)
	GetAirports(ctx context.Context, in *GetAirportsRequest, opts ...grpc.CallOption) (*GetAirportsReply, error)
	ListAirports(ctx context.Context, in *ListAirportsRequest, opts ...grpc.CallOption) (*ListAirportsReply, error)
}

type airportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirportServiceClient(cc grpc.ClientConnInterface) AirportServiceClient {
	return &airportServiceClient{cc}
}

func (c *airportServiceClient) CreateAirports(ctx context.Context, in *CreateAirportsRequest, opts ...grpc.CallOption) (*CreateAirportsReply, error) {
	out := new(CreateAirportsReply)
	err := c.cc.Invoke(ctx, "/pb.AirportService/CreateAirports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airportServiceClient) DeleteAirports(ctx context.Context, in *DeleteAirportsRequest, opts ...grpc.CallOption) (*DeleteAirportsReply, error) {
	out := new(DeleteAirportsReply)
	err := c.cc.Invoke(ctx, "/pb.AirportService/DeleteAirports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airportServiceClient) GetAirports(ctx context.Context, in *GetAirportsRequest, opts ...grpc.CallOption) (*GetAirportsReply, error) {
	out := new(GetAirportsReply)
	err := c.cc.Invoke(ctx, "/pb.AirportService/GetAirports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airportServiceClient) ListAirports(ctx context.Context, in *ListAirportsRequest, opts ...grpc.CallOption) (*ListAirportsReply, error) {
	out := new(ListAirportsReply)
	err := c.cc.Invoke(ctx, "/pb.AirportService/ListAirports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirportServiceServer is the server API for AirportService service.
// All implementations must embed UnimplementedAirportServiceServer
// for forward compatibility
type AirportServiceServer interface {
	CreateAirports(context.Context, *CreateAirportsRequest) (*CreateAirportsReply, error)
	DeleteAirports(context.Context, *DeleteAirportsRequest) (*DeleteAirportsReply, error)
	GetAirports(context.Context, *GetAirportsRequest) (*GetAirportsReply, error)
	ListAirports(context.Context, *ListAirportsRequest) (*ListAirportsReply, error)
	mustEmbedUnimplementedAirportServiceServer()
}

// UnimplementedAirportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAirportServiceServer struct {
}

func (UnimplementedAirportServiceServer) CreateAirports(context.Context, *CreateAirportsRequest) (*CreateAirportsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAirports not implemented")
}
func (UnimplementedAirportServiceServer) DeleteAirports(context.Context, *DeleteAirportsRequest) (*DeleteAirportsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAirports not implemented")
}
func (UnimplementedAirportServiceServer) GetAirports(context.Context, *GetAirportsRequest) (*GetAirportsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirports not implemented")
}
func (UnimplementedAirportServiceServer) ListAirports(context.Context, *ListAirportsRequest) (*ListAirportsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAirports not implemented")
}
func (UnimplementedAirportServiceServer) mustEmbedUnimplementedAirportServiceServer() {}

// UnsafeAirportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirportServiceServer will
// result in compilation errors.
type UnsafeAirportServiceServer interface {
	mustEmbedUnimplementedAirportServiceServer()
}

func RegisterAirportServiceServer(s grpc.ServiceRegistrar, srv AirportServiceServer) {
	s.RegisterService(&AirportService_ServiceDesc, srv)
}

func _AirportService_CreateAirports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAirportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirportServiceServer).CreateAirports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirportService/CreateAirports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirportServiceServer).CreateAirports(ctx, req.(*CreateAirportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirportService_DeleteAirports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAirportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirportServiceServer).DeleteAirports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirportService/DeleteAirports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirportServiceServer).DeleteAirports(ctx, req.(*DeleteAirportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirportService_GetAirports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAirportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirportServiceServer).GetAirports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirportService/GetAirports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirportServiceServer).GetAirports(ctx, req.(*GetAirportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirportService_ListAirports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAirportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirportServiceServer).ListAirports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirportService/ListAirports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirportServiceServer).ListAirports(ctx, req.(*ListAirportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AirportService_ServiceDesc is the grpc.ServiceDesc for AirportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AirportService",
	HandlerType: (*AirportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAirports",
			Handler:    _AirportService_CreateAirports_Handler,
		},
		{
			MethodName: "DeleteAirports",
			Handler:    _AirportService_DeleteAirports_Handler,
		},
		{
			MethodName: "GetAirports",
			Handler:    _AirportService_GetAirports_Handler,
		},
		{
			MethodName: "ListAirports",
			Handler:    _AirportService_ListAirports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/airport.proto",
}
