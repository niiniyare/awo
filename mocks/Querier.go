// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/niiniyare/awo/db/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// CreateAircraft provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateAircraft(ctx context.Context, arg db.CreateAircraftParams) (db.Aircraft, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Aircraft
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateAircraftParams) db.Aircraft); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Aircraft)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.CreateAircraftParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAirline provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateAirline(ctx context.Context, arg db.CreateAirlineParams) (db.Airline, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Airline
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateAirlineParams) db.Airline); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Airline)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.CreateAirlineParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAirport provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateAirport(ctx context.Context, arg db.CreateAirportParams) (db.Airport, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Airport
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateAirportParams) db.Airport); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Airport)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.CreateAirportParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAircraft provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteAircraft(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAirline provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteAirline(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAirports provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteAirports(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAircraft provides a mock function with given fields: ctx, id
func (_m *Querier) GetAircraft(ctx context.Context, id int64) (db.Aircraft, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Aircraft
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Aircraft); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Aircraft)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAirline provides a mock function with given fields: ctx, id
func (_m *Querier) GetAirline(ctx context.Context, id int64) (db.Airline, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Airline
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Airline); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Airline)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAirport provides a mock function with given fields: ctx, iataCode
func (_m *Querier) GetAirport(ctx context.Context, iataCode string) (db.Airport, error) {
	ret := _m.Called(ctx, iataCode)

	var r0 db.Airport
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Airport); ok {
		r0 = rf(ctx, iataCode)
	} else {
		r0 = ret.Get(0).(db.Airport)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, iataCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAircraft provides a mock function with given fields: ctx, arg
func (_m *Querier) ListAircraft(ctx context.Context, arg db.ListAircraftParams) ([]db.Aircraft, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.Aircraft
	if rf, ok := ret.Get(0).(func(context.Context, db.ListAircraftParams) []db.Aircraft); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Aircraft)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.ListAircraftParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAirline provides a mock function with given fields: ctx, arg
func (_m *Querier) ListAirline(ctx context.Context, arg db.ListAirlineParams) ([]db.Airline, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.Airline
	if rf, ok := ret.Get(0).(func(context.Context, db.ListAirlineParams) []db.Airline); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Airline)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, db.ListAirlineParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAirport provides a mock function with given fields: ctx
func (_m *Querier) ListAirport(ctx context.Context) ([]db.ListAirportRow, error) {
	ret := _m.Called(ctx)

	var r0 []db.ListAirportRow
	if rf, ok := ret.Get(0).(func(context.Context) []db.ListAirportRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.ListAirportRow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQuerier interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuerier(t mockConstructorTestingTNewQuerier) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
