// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: srv_airline.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AirlinesServiceClient is the client API for AirlinesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirlinesServiceClient interface {
	CreateAirline(ctx context.Context, in *CreateAirlineRequest, opts ...grpc.CallOption) (*AirlineRes, error)
	GetAirline(ctx context.Context, in *GetAirlineRequest, opts ...grpc.CallOption) (*AirlineRes, error)
	UpdateAirline(ctx context.Context, in *UpdateAirlineRequest, opts ...grpc.CallOption) (*AirlineRes, error)
	DeleteAirline(ctx context.Context, in *DeleteAirlineRequest, opts ...grpc.CallOption) (*AirlineRes, error)
	ListAirlines(ctx context.Context, in *ListAirlinesReq, opts ...grpc.CallOption) (*ListAirlineRes, error)
}

type airlinesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirlinesServiceClient(cc grpc.ClientConnInterface) AirlinesServiceClient {
	return &airlinesServiceClient{cc}
}

func (c *airlinesServiceClient) CreateAirline(ctx context.Context, in *CreateAirlineRequest, opts ...grpc.CallOption) (*AirlineRes, error) {
	out := new(AirlineRes)
	err := c.cc.Invoke(ctx, "/pb.AirlinesService/CreateAirline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airlinesServiceClient) GetAirline(ctx context.Context, in *GetAirlineRequest, opts ...grpc.CallOption) (*AirlineRes, error) {
	out := new(AirlineRes)
	err := c.cc.Invoke(ctx, "/pb.AirlinesService/GetAirline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airlinesServiceClient) UpdateAirline(ctx context.Context, in *UpdateAirlineRequest, opts ...grpc.CallOption) (*AirlineRes, error) {
	out := new(AirlineRes)
	err := c.cc.Invoke(ctx, "/pb.AirlinesService/UpdateAirline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airlinesServiceClient) DeleteAirline(ctx context.Context, in *DeleteAirlineRequest, opts ...grpc.CallOption) (*AirlineRes, error) {
	out := new(AirlineRes)
	err := c.cc.Invoke(ctx, "/pb.AirlinesService/DeleteAirline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airlinesServiceClient) ListAirlines(ctx context.Context, in *ListAirlinesReq, opts ...grpc.CallOption) (*ListAirlineRes, error) {
	out := new(ListAirlineRes)
	err := c.cc.Invoke(ctx, "/pb.AirlinesService/ListAirlines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirlinesServiceServer is the server API for AirlinesService service.
// All implementations must embed UnimplementedAirlinesServiceServer
// for forward compatibility
type AirlinesServiceServer interface {
	CreateAirline(context.Context, *CreateAirlineRequest) (*AirlineRes, error)
	GetAirline(context.Context, *GetAirlineRequest) (*AirlineRes, error)
	UpdateAirline(context.Context, *UpdateAirlineRequest) (*AirlineRes, error)
	DeleteAirline(context.Context, *DeleteAirlineRequest) (*AirlineRes, error)
	ListAirlines(context.Context, *ListAirlinesReq) (*ListAirlineRes, error)
	mustEmbedUnimplementedAirlinesServiceServer()
}

// UnimplementedAirlinesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAirlinesServiceServer struct {
}

func (UnimplementedAirlinesServiceServer) CreateAirline(context.Context, *CreateAirlineRequest) (*AirlineRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAirline not implemented")
}
func (UnimplementedAirlinesServiceServer) GetAirline(context.Context, *GetAirlineRequest) (*AirlineRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirline not implemented")
}
func (UnimplementedAirlinesServiceServer) UpdateAirline(context.Context, *UpdateAirlineRequest) (*AirlineRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAirline not implemented")
}
func (UnimplementedAirlinesServiceServer) DeleteAirline(context.Context, *DeleteAirlineRequest) (*AirlineRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAirline not implemented")
}
func (UnimplementedAirlinesServiceServer) ListAirlines(context.Context, *ListAirlinesReq) (*ListAirlineRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAirlines not implemented")
}
func (UnimplementedAirlinesServiceServer) mustEmbedUnimplementedAirlinesServiceServer() {}

// UnsafeAirlinesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirlinesServiceServer will
// result in compilation errors.
type UnsafeAirlinesServiceServer interface {
	mustEmbedUnimplementedAirlinesServiceServer()
}

func RegisterAirlinesServiceServer(s grpc.ServiceRegistrar, srv AirlinesServiceServer) {
	s.RegisterService(&AirlinesService_ServiceDesc, srv)
}

func _AirlinesService_CreateAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAirlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirlinesServiceServer).CreateAirline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirlinesService/CreateAirline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirlinesServiceServer).CreateAirline(ctx, req.(*CreateAirlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirlinesService_GetAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAirlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirlinesServiceServer).GetAirline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirlinesService/GetAirline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirlinesServiceServer).GetAirline(ctx, req.(*GetAirlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirlinesService_UpdateAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAirlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirlinesServiceServer).UpdateAirline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirlinesService/UpdateAirline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirlinesServiceServer).UpdateAirline(ctx, req.(*UpdateAirlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirlinesService_DeleteAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAirlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirlinesServiceServer).DeleteAirline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirlinesService/DeleteAirline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirlinesServiceServer).DeleteAirline(ctx, req.(*DeleteAirlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirlinesService_ListAirlines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAirlinesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirlinesServiceServer).ListAirlines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AirlinesService/ListAirlines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirlinesServiceServer).ListAirlines(ctx, req.(*ListAirlinesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AirlinesService_ServiceDesc is the grpc.ServiceDesc for AirlinesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirlinesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AirlinesService",
	HandlerType: (*AirlinesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAirline",
			Handler:    _AirlinesService_CreateAirline_Handler,
		},
		{
			MethodName: "GetAirline",
			Handler:    _AirlinesService_GetAirline_Handler,
		},
		{
			MethodName: "UpdateAirline",
			Handler:    _AirlinesService_UpdateAirline_Handler,
		},
		{
			MethodName: "DeleteAirline",
			Handler:    _AirlinesService_DeleteAirline_Handler,
		},
		{
			MethodName: "ListAirlines",
			Handler:    _AirlinesService_ListAirlines_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "srv_airline.proto",
}
